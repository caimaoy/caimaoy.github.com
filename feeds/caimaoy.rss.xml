<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>caimaoy's blog</title><link>http://caimaoy.github.io/</link><description></description><atom:link href="http://caimaoy.github.io/feeds%5Ccaimaoy.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 05 Aug 2015 15:36:00 +0800</lastBuildDate><item><title>如何用axis的wsdd方法部署WebService</title><link>http://caimaoy.github.io/how-to-deploy-webservice-by-axis-wsdd.html</link><description>&lt;h2&gt;编写 deploy.wsdd 文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;放置于 %Tomcat_Home%\webapps\axis\WEB-INF 中&lt;/li&gt;
&lt;li&gt;内容如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;deployment&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://xml.apache.org/axis/wsdd/&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:java=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://xml.apache.org/axis/wsdd/providers/java&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WSDD&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;provider=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;java:RPC&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;className&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.caimaoy&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- * 代表所有的方法都暴露 --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;allowedMethods&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;request&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/deployment&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;service标签代表一个WebService服务，HelloWorldWSDD就是当前WebService的名称&lt;/li&gt;
&lt;li&gt;provider是java的WebService类型，分别有： RPC、Document、Wrapped、Message、EJB、RMI&lt;/li&gt;
&lt;li&gt;有兴趣的可以看看org.apache.axis.providers.java包下面的WebService的实现类或是文档&lt;/li&gt;
&lt;li&gt;parameter的参数className代表当前WebService的class类路径&lt;/li&gt;
&lt;li&gt;allowedMethods代表暴露的方法，那些方法在客户端可以调用；&lt;/li&gt;
&lt;li&gt;&lt;parameter name="scope" value="request" /&gt;&lt;/li&gt;
&lt;li&gt;这个是当前WebService的作用域，它有3个值，分别是：request、session、application&lt;/li&gt;
&lt;li&gt;request代表为每个WebService SOAP的请求都产生一个服务对象，和Spring的scope很像，在服务请求频繁的话会消耗很多资源&lt;/li&gt;
&lt;li&gt;session 是给每个调用当前WebService的客户端创建一个服务对象&lt;/li&gt;
&lt;li&gt;application 是个当前所有的请求创建一个服务对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;发布 WebService&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;写完配置后，就需要用axis提供的AdminClient工具类帮我们发布WebService，直到生成server-config.wsdd&lt;/li&gt;
&lt;li&gt;步骤如下:&lt;/li&gt;
&lt;li&gt;启动Tomcat&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行cmd命令，然后进入当前工程发布的目录，即%tomcat_home%/webapps/project/WEB-INF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;java -Djava.ext.dirs=lib org.apache.axis.client.AdminClient deploy.wsdd
java -Djava.ext.dirs=lib org.apache.axis.client.AdminClient -p 8082 -s /axis/servlet/AxisServlet deploy.wsdd
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;-p 表示端口Tomcat端口号，AdminClient 默认为__8080__&lt;/li&gt;
&lt;li&gt;这里的deploy.wsdd是我们刚才定制的wsdd文件，java当然是jvm的命令&lt;/li&gt;
&lt;li&gt;-Djava.ext.dirs=lib设置当前命令的依赖包&lt;/li&gt;
&lt;li&gt;AdminClient是axis提供的工具类，这个类本来是可以在官方的工程中admin可以直接运行的（这里不可以，下载下来的少了AdminServlet，有兴趣的可以研究下，就是前面说的官方的示例）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果运行命令后，看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Processing file deploy.wsdd
&lt;span class="nt"&gt;&amp;lt;Admin&amp;gt;&lt;/span&gt;Done processing&lt;span class="nt"&gt;&amp;lt;/Admin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;就代表快成功了，why？快！看看deploy.wsdd同级目录有没有生成server-config.wsdd如果有这个文件就成功了，没有就失败了&lt;/li&gt;
&lt;li&gt;如果失败了还有解决办法，首先你得启动tomcat，将我们的工程发布出去。然后在重复上面的命令，不行就换命令行代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;java -Djava.ext.dirs=lib org.apache.axis.client.AdminClient -lhttp://localhost:8080/AxisWebService/services/AdminService deploy.wsdd
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;-lhttp://localhost:8080/AxisWebService/services/AdminService是因为你的端口可能被axis占用了，我们将指定AdminService来完成转换，运行上面命令就没有问题了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;WebService 客户端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我这里只说一种客户端的实现方法，在网上看了好像有超过6种以上的方法&lt;/li&gt;
&lt;li&gt;大概的代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.axis.client.Call&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.axis.client.Service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.xml.namespace.QName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestClient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://caimaoy.com/axis/services/WSDD?wsdl=1&amp;amp;test=test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;Service&lt;/span&gt;  &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Call&lt;/span&gt;  &lt;span class="n"&gt;call&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTargetEndpointAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOperationName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://soapinterop.org/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;querySingle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;got:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提问：如果我出现了 java.lang.reflect.InvocationTargetException 这样的异常如何处理？&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回答：这是映射出错，我遇到的情况是在 %Tomcat_Home%\webapps\axis\WEB-INF 中添加缺失是jar包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提问：作为一个WebService能够获取到客户端的IP、请求的requestString吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;回答：可以大概的获取方式如下,获取到了 HttpServletRequest requsest,也就有了想要的东西了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.axis.MessageContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.axis.transport.http.HTTPConstants&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getClientInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;asYouLike&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="o"&gt;*/&lt;/span&gt;
        &lt;span class="n"&gt;MessageContext&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MessageContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCurrentMessageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MessageContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCurrentContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;无法获取到MessageContext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTPConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MC_HTTP_SERVLETREQUEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;remote  ip:  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRemoteAddr&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;request URI:  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRequestURI&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quesryString :  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getQueryString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 05 Aug 2015 15:36:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-08-05:how-to-deploy-webservice-by-axis-wsdd.html</guid><category>java</category><category>webservice</category><category>axis</category><category>wsdd</category></item><item><title>python re.sub</title><link>http://caimaoy.github.io/python-re-sub.html</link><description>&lt;ul&gt;
&lt;li&gt;经常遇到使用re.sub的情况，但经常忘记，所以记录一下&lt;/li&gt;
&lt;li&gt;首先还是看看大神的简介：&lt;a href="http://www.crifan.com/python_re_sub_detailed_introduction/"&gt;crifan【整理】详解Python中re.sub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sub(pattern, repl, string, count=0, flags=0)
    Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it&amp;#39;s passed the match object and must return
    a replacement string to be used.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/re.html#re.sub"&gt;re.sub官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法和功能我就不详述了，下面看看一些奇葩需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;首先是换位的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def change_place(s):
    &amp;#39;&amp;#39;&amp;#39;
    &amp;gt;&amp;gt;&amp;gt; change_place(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
    &amp;#39;jessie&amp;amp;caimaoy&amp;#39;
    &amp;#39;&amp;#39;&amp;#39;
    return re.sub(r&amp;#39;(caimaoy)(&amp;amp;)(jessie)&amp;#39;, r&amp;#39;\3\2\1&amp;#39;, s)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;然后是换位换字符的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def change_place_and_joiner(s):
    &amp;#39;&amp;#39;&amp;#39;
    &amp;gt;&amp;gt;&amp;gt; change_place_and_joiner(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
    &amp;#39;jessie with caimaoy&amp;#39;
    &amp;#39;&amp;#39;&amp;#39;
    return re.sub(r&amp;#39;(caimaoy)(&amp;amp;)(jessie)&amp;#39;, r&amp;#39;\3 with \1&amp;#39;, s)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;看起来不错，但是如果我要换的字符是数值，会发生什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def change_place_and_joiner_with_number(s):
    &amp;#39;&amp;#39;&amp;#39;
    &amp;gt;&amp;gt;&amp;gt; change_place_and_joiner_with_number(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
    &amp;#39;jessie0caimaoy&amp;#39;
    &amp;#39;&amp;#39;&amp;#39;
    return re.sub(r&amp;#39;(caimaoy)(&amp;amp;)(jessie)&amp;#39;, r&amp;#39;\30\1&amp;#39;, s)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;File &amp;quot;test_doc_test.py&amp;quot;, line 37, in __main__.change_place_and_joiner_with_numbe
r
Failed example:
    change_place_and_joiner_with_number(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
Exception raised:
    Traceback (most recent call last):
      File &amp;quot;D:\Python27\lib\doctest.py&amp;quot;, line 1289, in __run
        compileflags, 1) in test.globs
      File &amp;quot;&amp;lt;doctest __main__.change_place_and_joiner_with_number[0]&amp;gt;&amp;quot;, line 1,
in &amp;lt;module&amp;gt;
        change_place_and_joiner_with_number(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
      File &amp;quot;test_doc_test.py&amp;quot;, line 40, in change_place_and_joiner_with_number
        return re.sub(r&amp;#39;(caimaoy)(&amp;amp;)(jessie)&amp;#39;, r&amp;#39;\30\1&amp;#39;, s)
      File &amp;quot;D:\Python27\lib\re.py&amp;quot;, line 151, in sub
        return _compile(pattern, flags).sub(repl, string, count)
      File &amp;quot;D:\Python27\lib\re.py&amp;quot;, line 275, in filter
        return sre_parse.expand_template(template, match)
      File &amp;quot;D:\Python27\lib\sre_parse.py&amp;quot;, line 789, in expand_template
        raise error, &amp;quot;invalid group reference&amp;quot;
    error: invalid group reference
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;报错了！大概的描述就是我们根本就没有30这个组&lt;/li&gt;
&lt;li&gt;如何解决？看看文档，下面是解决方案，&lt;strong&gt;用\g&lt;n&gt;来替代\n&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def change_place_and_joiner_with_number(s):
    &amp;#39;&amp;#39;&amp;#39;
    &amp;gt;&amp;gt;&amp;gt; change_place_and_joiner_with_number(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
    &amp;#39;jessie0caimaoy&amp;#39;
    &amp;#39;&amp;#39;&amp;#39;
    return re.sub(r&amp;#39;(caimaoy)(&amp;amp;)(jessie)&amp;#39;, r&amp;#39;\g&amp;lt;3&amp;gt;0\g&amp;lt;1&amp;gt;&amp;#39;, s)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;好像没有进一步的需求了，其实上面的需求re.sub的第二个参数传入一个函数是可以解决的&lt;/li&gt;
&lt;li&gt;不过就是懒（优秀品质）&lt;/li&gt;
&lt;li&gt;最后给一个传入函数的例子&lt;/li&gt;
&lt;li&gt;要replace为大写&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def change_place_and_upper(s):
    &amp;#39;&amp;#39;&amp;#39;
    &amp;gt;&amp;gt;&amp;gt; change_place_and_upper(&amp;#39;caimaoy&amp;amp;jessie&amp;#39;)
    &amp;#39;JESSIE&amp;amp;CAIMAOY&amp;#39;
    &amp;#39;&amp;#39;&amp;#39;
    def _upper(matched):
        return matched.group(3).upper() + matched.group(2) + matched.group(1).upper()
    return re.sub(r&amp;#39;(caimaoy)(&amp;amp;)(jessie)&amp;#39;, _upper, s)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;看看以后还有什么需求，估计传入函数基本都能解决&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Mon, 13 Jul 2015 11:17:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-07-13:python-re-sub.html</guid><category>python</category></item><item><title>HHKB初体验</title><link>http://caimaoy.github.io/diary-HHKB.html</link><description>&lt;h3&gt;首先庆祝一下COC冠军杯&lt;/h3&gt;
&lt;p&gt;&lt;img alt="COC冠军杯" src="http://7xif3g.com1.z0.glb.clouddn.com/COC冠军杯.PNG" /&gt;&lt;/p&gt;
&lt;h3&gt;今天的主角: HHKB&lt;/h3&gt;
&lt;p&gt;&lt;img alt="HHKB" src="http://7xif3g.com1.z0.glb.clouddn.com/HHKB.JPG" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同事漂洋过海从岛国带回一个无刻版HHKB Pro2&lt;/li&gt;
&lt;li&gt;因为是无刻版，到现在都非常痛苦&lt;/li&gt;
&lt;li&gt;不记得键位，所以下面先来一个HHKB Professional 2 Layout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="HHKB Professional 2 Layout" src="http://7xif3g.com1.z0.glb.clouddn.com/HHKB_Pro2_Layout.jpg" /&gt;&lt;/p&gt;
&lt;h4&gt;键盘设置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么？键盘还要设置？又不是鼠标还要设置PPI？&lt;/li&gt;
&lt;li&gt;是的你没有听错，这键盘就是要设置，主要是满足不同系统需要&lt;/li&gt;
&lt;li&gt;HHKB Pro 2 是有一排跳线6个开关，理论上是可以有2^6==64种不同的组合&lt;/li&gt;
&lt;li&gt;先来看看跳线的模式说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="跳线模式" src="http://7xif3g.com1.z0.glb.clouddn.com/HHKB_跳线说明.JPG" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再来看看跳线前两位模式的说明
&lt;img alt="模式说明" src="http://7xif3g.com1.z0.glb.clouddn.com/HHKB_模式说明.JPG" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果看懂了这个，你也就配置好了自己的键盘&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;本人配置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;本人工作在windos环境！（对！你没有看错，就是万恶的windows！！！）&lt;/li&gt;
&lt;li&gt;跳线打开1、3、5&lt;/li&gt;
&lt;li&gt;Delete键改为BackSpace键&lt;/li&gt;
&lt;li&gt;最下面一排按键为：win、alt、空格、alt、win&lt;/li&gt;
&lt;li&gt;这样基本满足在windows下面的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;FAQ&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;- 如何退格？
- 使用Fn + Delete 或者跳线3打开使用Delete
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;- 如何关闭窗口？
- 使用Alt + Fn + F4 或者有些窗口可以使用Ctrl + w
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;- 如何在Vim中按Esc？
- 这个要算是我很痛苦的一个问题了
- 我本来通过注册表吧Caps和Esc的位置调换了
- 现在Caps的位置变成了Ctrl

- 方案一：
- 直接按 Esc

- 方案二：
- &amp;lt;C-[&amp;gt;在vim中也是Esc
- 但是我还没有习惯，经常按错成&amp;lt;C-p&amp;gt;,同时经常把Shift按成Ctrl

- 方案三：
- 黑魔法 jk 或者 jj 或者什么 map到Esc
- 我个人试验过，个人不习惯
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;- 上下左右如何按？
- Fn + [/;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;- 翻页、End如何按？
- Fn + keyboard layout 自己看了
- 反正我是打印了一个layout在桌面上，囧
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;这是我用HHKB在Vim下面写的第一篇文章，误操作无数
 希望慢慢能够适应
 HHKB真的手感超一流，相比原厂CHERRY，我更喜欢HHKB的手感
 希望有体验的大神们，告诉一下小白我更多tips，THX&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Tue, 16 Jun 2015 20:01:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-06-16:diary-HHKB.html</guid><category>diary</category><category>HHKB</category></item><item><title>python const</title><link>http://caimaoy.github.io/python-const.html</link><description>&lt;ul&gt;
&lt;li&gt;python 没有const 这样的语法，但是在项目中可能会有这样的需求？&lt;/li&gt;
&lt;li&gt;自己动手丰衣足食！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;const.py&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先创建一个const.py文件，代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Last modified time: 2015-06-09 09:49:29&lt;/span&gt;
&lt;span class="sd"&gt;Edit time: 2015-06-09 09:55:07&lt;/span&gt;
&lt;span class="sd"&gt;File name: const.py&lt;/span&gt;
&lt;span class="sd"&gt;Edit by caimaoy&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_const&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstCaseError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConstError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Can&amp;#39;t change const. &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConstCaseError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                    &lt;span class="s"&gt;&amp;#39;const name &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; is not all uppercase&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;


&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_const&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;使用代理模式，代理类的__setattr__方法&lt;/li&gt;
&lt;li&gt;判断是否键值，抛出自定义的Error类&lt;/li&gt;
&lt;li&gt;判断键值格式是否符合要求，抛出自定义的Error类&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_const&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt;使加载此模块指向_const()类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;test_const.py&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Last modified time: 2015-06-10 17:14:54&lt;/span&gt;
&lt;span class="sd"&gt;Edit time: 2015-06-10 17:15:21&lt;/span&gt;
&lt;span class="sd"&gt;File name: test_cosnt.py&lt;/span&gt;
&lt;span class="sd"&gt;Edit by caimaoy&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;const&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cosnt_error&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;jessie&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt; ConstError(&amp;quot;Can&amp;#39;t change const. NAME&amp;quot;,)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cosnt_case_error&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt; ConstCaseError(&amp;#39;const name &amp;quot;name&amp;quot; is not all uppercase&amp;#39;,)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;catch_error&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;test_cosnt_error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;test_cosnt_case_error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;catch_error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;对于const.py的测试&lt;/li&gt;
&lt;li&gt;运行结果如下,符合预期&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ConstError(&amp;quot;Can&amp;#39;t change const. NAME&amp;quot;,)
ConstCaseError(&amp;#39;const name &amp;quot;name&amp;quot; is not all uppercase&amp;#39;,)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;如果有需求可以代理__del__方法，保证常量不会被del&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;constant.py&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当然我们通常把所有的常量写入一个文件，方便管理&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Last modified time: 2015-06-10 17:38:12&lt;/span&gt;
&lt;span class="sd"&gt;Edit time: 2015-06-10 17:38:17&lt;/span&gt;
&lt;span class="sd"&gt;File name: constant.py&lt;/span&gt;
&lt;span class="sd"&gt;Edit by caimaoy&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;const&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Monster Hunter&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;使用的方法如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Last modified time: 2015-06-10 17:40:28&lt;/span&gt;
&lt;span class="sd"&gt;Edit time: 2015-06-10 17:40:35&lt;/span&gt;
&lt;span class="sd"&gt;File name: use_const.py&lt;/span&gt;
&lt;span class="sd"&gt;Edit by caimaoy&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;constant&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;use_const&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;const.NAME is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;const.GAME is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GAME&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;use_const&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;结果当然是预期的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;const.NAME is caimaoy
const.GAME is Monster Hunter
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 10 Jun 2015 16:55:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-06-10:python-const.html</guid><category>python</category></item><item><title>python split</title><link>http://caimaoy.github.io/python-split.html</link><description>&lt;h3&gt;str.split&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Help on method_descriptor:

split(...)
    S.split([sep [,maxsplit]]) -&amp;gt; list of strings

    Return a list of the words in the string S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are removed
    from the result.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;基本用法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [5]: &amp;#39;caimaoy jessie HHKB Tesla&amp;#39;.split(&amp;#39; &amp;#39;)
Out[5]: [&amp;#39;caimaoy&amp;#39;, &amp;#39;jessie&amp;#39;, &amp;#39;HHKB&amp;#39;, &amp;#39;Tesla&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;re.split&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;Help&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;re&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxsplit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Split&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;occurrences&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;returning&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;containing&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;resulting&lt;/span&gt; &lt;span class="nx"&gt;substrings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;基本用法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [14]: re.split(r&amp;#39;\d&amp;#39;, &amp;#39;caimaoy1jessie2HHKB3Tesla&amp;#39;)
Out[14]: [&amp;#39;caimaoy&amp;#39;, &amp;#39;jessie&amp;#39;, &amp;#39;HHKB&amp;#39;, &amp;#39;Tesla&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;迷惑用法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [15]: re.split(&amp;#39;o(o)&amp;#39;, &amp;#39;foobar&amp;#39;)
Out[15]: [&amp;#39;f&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;bar&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这是发生了什么啊？&lt;/li&gt;
&lt;li&gt;书里面的解释&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果模式包括小括号，那么括起来的字符组合会散布在分割后的字字符串之间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不过上面的例子还是很让人迷惑，还是自己写几个&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [19]: re.split(&amp;#39;(and)&amp;#39;, &amp;#39;caimaoyandjessie&amp;#39;)
Out[19]: [&amp;#39;caimaoy&amp;#39;, &amp;#39;and&amp;#39;, &amp;#39;jessie&amp;#39;]

In [20]: re.split(&amp;#39;o(and)o&amp;#39;, &amp;#39;caimaoyoandojessie&amp;#39;)
Out[20]: [&amp;#39;caimaoy&amp;#39;, &amp;#39;and&amp;#39;, &amp;#39;jessie&amp;#39;]

In [21]: re.split(r&amp;#39;(\d)&amp;#39;, &amp;#39;caimaoy3jessie&amp;#39;)
Out[21]: [&amp;#39;caimaoy&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;jessie&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;相信这几个例子写了之后就没有那么迷惑了&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Thu, 07 May 2015 10:14:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-05-07:python-split.html</guid><category>python</category></item><item><title>VIM 去掉重复行</title><link>http://caimaoy.github.io/vim-removing-duplicate-lines.html</link><description>&lt;h3&gt;不难理解的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;先想想思路:&lt;ul&gt;
&lt;li&gt;先排序&lt;/li&gt;
&lt;li&gt;然后去掉重复的行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看看具体命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:sort u
g/^\(.*\)\n\1$/d
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;下面讲解一下：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:sort u             &amp;lt;-- 排序
g/^\(.*\)\n\1$/d    &amp;lt;-- kjkj
g/            /d    &amp;lt;-- g命令delete 满足要求的行
  ^\(.*\)\n         &amp;lt;-- 一行的开始到换行
           \1$      &amp;lt;-- \1 是前面(.*\)的内容，也就是说和前面的行内容相等
             $      &amp;lt;-- 结束符，两行相等是匹配条件
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些高级vim语法的操作&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://vim.wikia.com/wiki/Uniq_-_Removing_duplicate_lines"&gt;参考博文&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先看一下命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;g/\%(^\1\n\)\@&amp;lt;=\(.*\)$/d
g/\v%(^\1\n)@&amp;lt;=(.*)$/d
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;看一下原本博客中的解释&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;g/\%(^\1\n\)\@&amp;lt;=\(.*\)$/d
g/                     /d  &amp;lt;-- Delete the lines matching the regexp
            \@&amp;lt;=           &amp;lt;-- If the bit following matches, make sure the bit preceding this symbol directly precedes the match
                \(.*\)$    &amp;lt;-- Match the line into subst register 1
  \%(     \)               &amp;lt;-- Group without placing in a subst register.
     ^\1\n                 &amp;lt;-- Match subst register 1 followed the new line between the 2 lines
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这里面有一个reg的知识点：&lt;strong&gt;环视&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;\@&amp;lt;= 这是一个逆向环视&lt;/li&gt;
&lt;li&gt;所以建议大家还是用第一种方法就好了&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 06 May 2015 10:57:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-05-06:vim-removing-duplicate-lines.html</guid><category>vim</category></item><item><title>Jessie English</title><link>http://caimaoy.github.io/Jessie-English.html</link><description>&lt;h3&gt;prefix &amp;amp; root&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://caimaoy.gitbooks.io/jessie-prefix-root/content/"&gt;content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/caimaoy/jessie-prefix-root/details"&gt;details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/download/pdf/book/caimaoy/jessie-prefix-root"&gt;pdf_download_link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 22 Apr 2015 10:24:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-22:Jessie-English.html</guid><category>English</category></item><item><title>pyinstaller生成exe中文路径无法运行解决方案</title><link>http://caimaoy.github.io/pyinstaller-chinese-dir.html</link><description>&lt;blockquote&gt;
&lt;p&gt;pyinstaller生成的exe中文路径不能运行，错误信息如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;D:\测试&amp;gt;&amp;quot;D:\测试\caimaoy_tool.exe&amp;quot;
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 21, in &amp;lt;module&amp;gt;
  File &amp;quot;D:\Python27\Lib\site-packages\PyInstaller\loader\pyi_importers.py&amp;quot;, line
 507, in install
  File &amp;quot;D:\Python27\Lib\site-packages\PyInstaller\loader\pyi_importers.py&amp;quot;, line
 156, in __init__
ImportError: Can&amp;#39;t load frozen modules.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;直接上&lt;a href="http://hi.baidu.com/domhow/item/341817d1afd5a558ddf9bee9"&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在此&lt;a href="https://github.com/dkw72n/pyinstaller/tree/develop"&gt;安装pyinstaller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;但是介于他是百度空间的东西我还是备份一下的好，以下内容摘抄自解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;原文&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;想修改windows的默认字符集为 utf8 的  &lt;/p&gt;
&lt;p&gt;请参考这篇 &lt;a href="http://superuser.com/questions/239810/setting-utf8-as-default-character-encoding-in-windows-7"&gt;http://superuser.com/questions/239810/setting-utf8-as-default-character-encoding-in-windows-7&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;本质问题是他把我们的目录当成是utf8编码的.  &lt;/p&gt;
&lt;p&gt;然后, 只能看代码了. 发现 bootloader 里有个 stb_to_utf8 和 stb_from_utf8  &lt;/p&gt;
&lt;p&gt;而且是 放在 #ifdef _WIN32 里的! =.= 里面正经地实现了 UTF16 &amp;lt;-&amp;gt; UTF8 .
于是. 把这两个函数用 MultiByteToWideChar WideCharToMultiByte 改了.重新编译.好了.  &lt;/p&gt;
&lt;p&gt;然后我 fork 过来改了. &lt;a href="https://github.com/dkw72n/pyinstaller/tree/develop"&gt;https://github.com/dkw72n/pyinstaller/tree/develop&lt;/a&gt; 有需要的可以来取.  &lt;/p&gt;
&lt;p&gt;(顺便整理下走过的弯路, 开始时已经知道是是模块加载的时候编码不对了, 只是一直纠结在''我怎么在模块加载的时候强行把他    的错误编码掰过来''. 无果. 可能的原因是那个阶段编码相关模块没被加载.)  &lt;/p&gt;
&lt;p&gt;另外: 感谢 ikadog 同学两度把这个链接贴到了官方的ticket[&lt;a href="http://trac.pyinstaller.org/ticket/901"&gt;1&lt;/a&gt;,&lt;a href="http://trac.pyinstaller.org/ticket/824"&gt;2&lt;/a&gt;]. 不过貌似他们没打算处理.  &lt;/p&gt;
&lt;p&gt;# update(2014_09_01): 之前没有编译64位的bootloader，用64位的同学直接取下来会发现还是不能用，今天补上了，之前不行的可以再试试。  &lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 15 Apr 2015 20:14:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-15:pyinstaller-chinese-dir.html</guid><category>pyinstaller</category><category>python</category></item><item><title>PyQt 创建新窗口</title><link>http://caimaoy.github.io/pyqt_create_a_new_window.html</link><description>&lt;blockquote&gt;
&lt;p&gt;PyQt 如何新建一个窗口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;弹出新窗口&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slavewindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slaveWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGNAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;clicked()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slavewindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;slaveWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slaveWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mainwindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mainwindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;直接上代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;备注&lt;/h3&gt;
&lt;p&gt;说说要注意的吧:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;self.slavewindow = slaveWindow()
self.connect(button, SIGNAL(&amp;#39;clicked()&amp;#39;), self.slavewindow.show)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这两个是关键&lt;/li&gt;
&lt;li&gt;之前自己一个错误的做法是clicked信号关联了一个普通函数,在普通函数中创建新窗口的实例，同时调用show方法，现在想想实例的生命周期是有问题的，所以窗口一闪而过&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 15 Apr 2015 19:36:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-15:pyqt_create_a_new_window.html</guid><category>pyqt</category><category>python</category></item><item><title>pelican 如何添加404页面</title><link>http://caimaoy.github.io/pelican-add-404-page.html</link><description>&lt;blockquote&gt;
&lt;p&gt;pelican 已经挂在了github上面了但是如何挂上一个404 页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: Not Found
Status: hidden
Save_as: 404.html

&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.qq.com/404/search_children.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;homePageUrl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.caimaoy.com&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;homePageName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Back to Home Page&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;源码里面要说的几点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加Status: hidden这个元信息&lt;/li&gt;
&lt;li&gt;Save_as为404.html，这样的话就满足了github的要求&lt;/li&gt;
&lt;li&gt;挂上这一段js，出自我旁边的&lt;a href="http://www.qq.com/404/"&gt;鹅厂&lt;/a&gt;这样的事业还是要支持一下的&lt;/li&gt;
&lt;li&gt;最后看一看:&lt;a href="http://caimaoy.github.io/404/"&gt;效果图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;TODO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当然也是因为我没有找到pelican直接挂原始页面的办法，如果你知道下面disqus我&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;乱七八糟&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;我说了我今天要去跑步，不能再做一个颓废的胖纸了！！！&lt;/li&gt;
&lt;li&gt;另外今天在H亏成狗了，可以去天台了~&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Tue, 14 Apr 2015 19:26:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-14:pelican-add-404-page.html</guid><category>github</category><category>pelican</category></item><item><title>python 判断windows系统是32位还是64位</title><link>http://caimaoy.github.io/win32-or-win64-python.html</link><description>&lt;h3&gt;首先来看看错误方法：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下是在64位机器下使用32位python得到的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [14]: sys.version
Out[14]: &amp;#39;2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)]&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这里看到的其实是python的版本，而不是系统的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [15]: platform.architecture()
Out[15]: (&amp;#39;32bit&amp;#39;, &amp;#39;WindowsPE&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这个运行的结果也是不正确的&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [16]: print sys.maxint
2147483647
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;数字是2**31-1的话就是32位(这是错误的！！！)&lt;/li&gt;
&lt;li&gt;数字式2**64-1的话就是64位(这也是错误的！！！)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面引述的方法也是不正确的，因为使用的是sys库&lt;/p&gt;
&lt;h3&gt;正确方法&lt;/h3&gt;
&lt;h4&gt;1. 通过环境变量进行判断&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def is_64_windows():
    return &amp;#39;PROGRAMFILES(X86)&amp;#39; in os.environ
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. 通过注册表进行判断&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aReg = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, \
&amp;quot;SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;存在即为64bits&lt;/li&gt;
&lt;li&gt;如果不存在会抛出异常，进行捕获判断返回32bits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人观点到此结束，如果有其他方法可以评论回复我，THX&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 08 Apr 2015 10:24:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-08:win32-or-win64-python.html</guid><category>python</category><category>windows</category></item><item><title>python print</title><link>http://caimaoy.github.io/python-print.html</link><description>&lt;p&gt;今天突然想到要聊一下这个话题  &lt;/p&gt;
&lt;p&gt;在实际的使用当中我们经常用到print来显示一些状态比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [2]: print &amp;#39;caimaoy&amp;#39;
caimaoy

In [3]: print &amp;#39;caimaoy\n&amp;#39;
caimaoy


In [4]:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意一下空行数&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;这里面有个隐藏的参数，就是print会在每次输出后再输出一个'\n'，那如果我们是读取的
文本的文件一行一行print操作，其实每一行会打印两个'\n', 其中一个来自文本，另外一
个来自print的默认参数，如果我们只想要一个'\n'如何解决这个问题？&lt;/p&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;h2&gt;1. 使用''.join把需要的内容拼接起来然后一次性打印&lt;/h2&gt;
&lt;p&gt;大概可以得到这样的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [4]: a = [&amp;#39;caimaoy\n&amp;#39;, &amp;#39;caimaoy1\n&amp;#39;, &amp;#39;caimaoy3\n&amp;#39;]

In [5]: print &amp;#39;&amp;#39;.join(a)
caimaoy
caimaoy1
caimaoy3


In [6]:
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 使用print中的参数end&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [6]: print (&amp;#39;caimaoy&amp;#39;, end=&amp;#39;&amp;#39;)
  File &amp;quot;&amp;lt;ipython-input-6-dfd4986b6077&amp;gt;&amp;quot;, line 1
    print (&amp;#39;caimaoy&amp;#39;, end=&amp;#39;&amp;#39;)
                         ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是不幸的是在python2中我们好像不能只是这样做，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;caimaoy&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要做&lt;pre&gt;from __future__ import print_function&lt;/pre&gt;这个操作可以正常使用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Tue, 07 Apr 2015 13:58:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-07:python-print.html</guid><category>python</category></item><item><title>外链图片测试</title><link>http://caimaoy.github.io/test-pic-vim-keyboard.html</link><description>&lt;ul&gt;
&lt;li&gt;就是一个测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="test-pic-vim-keyboard" src="http://7xif3g.com1.z0.glb.clouddn.com/caimaoy_vim_keyboard.png" title="test-pic-vim-keyboard" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Fri, 03 Apr 2015 18:36:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-03:test-pic-vim-keyboard.html</guid><category>test</category><category>picture</category><category>vim</category></item><item><title>使用Pelican在Github上建立个人博客</title><link>http://caimaoy.github.io/build-blog-on-github-with-pelican.html</link><description>&lt;h1&gt;相关连接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/21/blog-create"&gt;基础篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/22/blog-advance"&gt;进阶篇&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;有以上的链接我就不再赘述了，讲讲一些其他的坑&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;基础知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.org/"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;配置文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这个应该是说得比较多的一部分了，因为使用windows(我也不想用！！！)不得不改动一下配置文件&lt;br /&gt;
重点修改如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;对于windows用户你可能要敢以下几件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载make.exe, 并且添加到环境变量中&lt;/li&gt;
&lt;li&gt;修改Makefile文件关键是一些路径，具体忘记是哪些了，你可以去看这个blog的&lt;a href="http://github.com/caimaoy"&gt;源代码&lt;/a&gt;对比一下&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;pelicanconfig.py&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git: publish
    git push origin &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;
    ghp-import -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中git的部分你懂就应该懂，说一下ghp-import&lt;br /&gt;
ghp-import 是用于分支发布的，也就是说你的源码是在一个分支，而生成的页面是在另外一个分支发布&lt;/p&gt;
&lt;h2&gt;ghp-import on Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/latest/tips.html#publishing-to-github"&gt;Until ghp-import Pull Request #25 is accepted,you will need to install a custom build of ghp-import:&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install https://github.com/chevah/ghp-import/archive/win-support.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用上面的pip安装&lt;br /&gt;
如果你安装不上可以先卸载&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip uninstall ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你无法用下面的方法安装，请下载&lt;a href="https://github.com/chevah/ghp-import/archive/win-support.zip"&gt;zip包&lt;/a&gt;后安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 01 Apr 2015 09:51:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-01:build-blog-on-github-with-pelican.html</guid><category>python</category><category>github</category><category>pelican</category></item><item><title>关于我</title><link>http://caimaoy.github.io/about-me.html</link><description>&lt;h1&gt;一个在国人F3的打工仔&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The Zen of Python, by Tim Peters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit.&lt;/li&gt;
&lt;li&gt;Simple is better than complex.&lt;/li&gt;
&lt;li&gt;Complex is better than complicated.&lt;/li&gt;
&lt;li&gt;Flat is better than nested.&lt;/li&gt;
&lt;li&gt;Sparse is better than dense.&lt;/li&gt;
&lt;li&gt;Readability counts.&lt;/li&gt;
&lt;li&gt;Special cases aren't special enough to break the rules.&lt;/li&gt;
&lt;li&gt;Although practicality beats purity.&lt;/li&gt;
&lt;li&gt;Errors should never pass silently.&lt;/li&gt;
&lt;li&gt;Unless explicitly silenced.&lt;/li&gt;
&lt;li&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/li&gt;
&lt;li&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/li&gt;
&lt;li&gt;Although that way may not be obvious at first unless you're Dutch.&lt;/li&gt;
&lt;li&gt;Now is better than never.&lt;/li&gt;
&lt;li&gt;Although never is often better than &lt;em&gt;right&lt;/em&gt; now.&lt;/li&gt;
&lt;li&gt;If the implementation is hard to explain, it's a bad idea.&lt;/li&gt;
&lt;li&gt;If the implementation is easy to explain, it may be a good idea.&lt;/li&gt;
&lt;li&gt;Namespaces are one honking great idea -- let's do more of those!&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 01 Apr 2015 15:43:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-01-01:about-me.html</guid><category>about-me</category><category>github</category><category>python</category></item></channel></rss>