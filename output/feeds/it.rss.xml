<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>caimaoy's blog</title><link>http://caimaoy.github.io/</link><description></description><atom:link href="http://caimaoy.github.io/feeds/it.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 08 Apr 2015 10:24:00 +0800</lastBuildDate><item><title>python 判断windows系统是32位还是64位</title><link>http://caimaoy.github.io/win32-or-win64-python.html</link><description>&lt;h3&gt;首先来看看错误方法：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下是在64位机器下使用32位python得到的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [14]: sys.version
Out[14]: &amp;#39;2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)]&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这里看到的其实是python的版本，而不是系统的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [15]: platform.architecture()
Out[15]: (&amp;#39;32bit&amp;#39;, &amp;#39;WindowsPE&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;这个运行的结果也是不正确的&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [16]: print sys.maxint
2147483647
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;数字是2**31-1的话就是32位(这是错误的！！！)&lt;/li&gt;
&lt;li&gt;数字式2**64-1的话就是64位(这也是错误的！！！)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面引述的方法也是不正确的，因为使用的是sys库&lt;/p&gt;
&lt;h3&gt;正确方法&lt;/h3&gt;
&lt;h4&gt;1. 通过环境变量进行判断&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def is_64_windows():
    return &amp;#39;PROGRAMFILES(X86)&amp;#39; in os.environ
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. 通过注册表进行判断&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aReg = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, \
&amp;quot;SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;存在即为64bits&lt;/li&gt;
&lt;li&gt;如果不存在会抛出异常，进行捕获判断返回32bits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人观点到此结束，如果有其他方法可以评论回复我，THX&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 08 Apr 2015 10:24:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-08:win32-or-win64-python.html</guid><category>python</category><category>windows</category></item><item><title>python print</title><link>http://caimaoy.github.io/python-print.html</link><description>&lt;p&gt;今天突然想到要聊一下这个话题  &lt;/p&gt;
&lt;p&gt;在实际的使用当中我们经常用到print来显示一些状态比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [2]: print &amp;#39;caimaoy&amp;#39;
caimaoy

In [3]: print &amp;#39;caimaoy\n&amp;#39;
caimaoy


In [4]:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意一下空行数&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;这里面有个隐藏的参数，就是print会在每次输出后再输出一个'\n'，那如果我们是读取的
文本的文件一行一行print操作，其实每一行会打印两个'\n', 其中一个来自文本，另外一
个来自print的默认参数，如果我们只想要一个'\n'如何解决这个问题？&lt;/p&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;h2&gt;1. 使用''.join把需要的内容拼接起来然后一次性打印&lt;/h2&gt;
&lt;p&gt;大概可以得到这样的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [4]: a = [&amp;#39;caimaoy\n&amp;#39;, &amp;#39;caimaoy1\n&amp;#39;, &amp;#39;caimaoy3\n&amp;#39;]

In [5]: print &amp;#39;&amp;#39;.join(a)
caimaoy
caimaoy1
caimaoy3


In [6]:
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 使用print中的参数end&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [6]: print (&amp;#39;caimaoy&amp;#39;, end=&amp;#39;&amp;#39;)
  File &amp;quot;&amp;lt;ipython-input-6-dfd4986b6077&amp;gt;&amp;quot;, line 1
    print (&amp;#39;caimaoy&amp;#39;, end=&amp;#39;&amp;#39;)
                         ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是不幸的是在python2中我们好像不能只是这样做，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;caimaoy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;caimaoy&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要做&lt;pre&gt;from __future__ import print_function&lt;/pre&gt;这个操作可以正常使用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Tue, 07 Apr 2015 13:58:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-07:python-print.html</guid><category>python</category></item><item><title>使用Pelican在Github上建立个人博客</title><link>http://caimaoy.github.io/build-blog-on-github-with-pelican.html</link><description>&lt;h1&gt;相关连接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/21/blog-create"&gt;基础篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/22/blog-advance"&gt;进阶篇&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;有以上的链接我就不再赘述了，讲讲一些其他的坑&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;基础知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.org/"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;配置文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这个应该是说得比较多的一部分了，因为使用windows(我也不想用！！！)不得不改动一下配置文件&lt;br /&gt;
重点修改如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;对于windows用户你可能要敢以下几件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载make.exe, 并且添加到环境变量中&lt;/li&gt;
&lt;li&gt;修改Makefile文件关键是一些路径，具体忘记是哪些了，你可以去看这个blog的&lt;a href="http://github.com/caimaoy"&gt;源代码&lt;/a&gt;对比一下&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;pelicanconfig.py&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git: publish
    git push origin &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;
    ghp-import -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中git的部分你懂就应该懂，说一下ghp-import&lt;br /&gt;
ghp-import 是用于分支发布的，也就是说你的源码是在一个分支，而生成的页面是在另外一个分支发布&lt;/p&gt;
&lt;h2&gt;ghp-import on Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/latest/tips.html#publishing-to-github"&gt;Until ghp-import Pull Request #25 is accepted,you will need to install a custom build of ghp-import:&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install https://github.com/chevah/ghp-import/archive/win-support.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用上面的pip安装&lt;br /&gt;
如果你安装不上可以先卸载&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip uninstall ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你无法用下面的方法安装，请下载&lt;a href="https://github.com/chevah/ghp-import/archive/win-support.zip"&gt;zip包&lt;/a&gt;后安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">caimaoy</dc:creator><pubDate>Wed, 01 Apr 2015 09:51:00 +0800</pubDate><guid>tag:caimaoy.github.io,2015-04-01:build-blog-on-github-with-pelican.html</guid><category>python</category><category>github</category><category>pelican</category></item></channel></rss>